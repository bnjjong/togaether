plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.hibernate.orm' version '6.1.5.Final'
    id 'org.graalvm.buildtools.native' version '0.9.18'
    id "org.asciidoctor.jvm.convert" version "2.4.0"
}

group = 'io.ddd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
    jsondoclet
}
ext {
    snippetsDir = file("$buildDir/generated-snippets") // snippet 이 생성될 디렉토리 지정
    javadocJsonDir = file("$buildDir/generated-javadoc-json") // javadoc-json 이 생성될 디렉토리 지정
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // https://mvnrepository.com/artifact/org.flywaydb/flyway-core
    implementation 'org.flywaydb:flyway-core:8.5.10'
    // https://mvnrepository.com/artifact/org.flywaydb/flyway-mysql
    implementation 'org.flywaydb:flyway-mysql:8.5.10'



    implementation 'org.springframework.boot:spring-boot-starter-security'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.11.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'


    // jwt decode시 jdk 11이상에서 문제 발생하여 bind library 추가
    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // https://mvnrepository.com/artifact/net.sf.json-lib/json-lib
    implementation group: 'net.sf.json-lib', name: 'json-lib', classifier:'jdk15', version: '2.4'


    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'

    // rest doc
    // auto restdoc
    testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.11'
    jsondoclet 'capital.scalable:spring-auto-restdocs-json-doclet-jdk9:2.0.11'
//    jsondoclet group: 'capital.scalable', name: 'spring-auto-restdocs-json-doclet', version: '2.0.11'
    // MockMvc 대신 REST Assured를 사용하려면 spring-restdocs-restassured 를 추가
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'


}

tasks.named('test') {
    useJUnitPlatform()
}

hibernate {
    enhancement {
        lazyInitialization true
        dirtyTracking true
        associationManagement true
    }
}


task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

// 테스트 실행 후, snipperDir에 snippet(.adoc 파일들) 생성
test {
    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir

    dependsOn jsonDoclet
    useJUnitPlatform()
//    finalizedBy 'asciidoctor'
}

// src/docs/asciidoc/*.adoc 파일을 build/docs/asciidoc에 *.html 파일로 변환
asciidoctor {
    inputs.dir snippetsDir
    dependsOn test

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
//    sources{
//        include("**/index.adoc","**/common/*.adoc")
//    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
//    baseDirFollowsSourceFile()
}

// 참고사항
// 공식 문서에서는 위의 ascidoctor.doFirst부터 아래 내용은 없고 이와 같은 내용만 있습니다.
// 이렇게 하면 jar로 만들어 질때 옮겨지는 것으로 IDE로 돌릴 때는 build 폴더에서만 확인이 가능합니다.
// 위 방법을 사용하면 IDE에서도 static으로 옮겨진 것을 확인할 수 있습니다.
// 위에 방법을 사용하든 아래 방법을 사용하든 편한 선택지를 사용하시면 됩니다.
bootJar {
    dependsOn asciidoctor
}


// ============================== end rest doc ==============================
